# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import hyperline_client
from hyperline_client.models.dataset_collection import DatasetCollection  # noqa: E501
from hyperline_client.rest import ApiException

class TestDatasetCollection(unittest.TestCase):
    """DatasetCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test DatasetCollection
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatasetCollection`
        """
        model = hyperline_client.models.dataset_collection.DatasetCollection()  # noqa: E501
        if include_optional :
            return DatasetCollection(
                raw_datasets = [
                    hyperline_client.models.dataset.Dataset(
                        chain = '', 
                        name = '', 
                        description = '', 
                        big_query_reference = '', 
                        spark_reference = '', 
                        sqldb_reference = '', 
                        tables = [
                            hyperline_client.models.dataset_table.DatasetTable(
                                name = '', 
                                is_view = True, 
                                columns = [
                                    hyperline_client.models.dataset_table_column.DatasetTableColumn(
                                        name = '', 
                                        type = '', 
                                        is_nullable = True, 
                                        is_partition_key = True, )
                                    ], )
                            ], 
                        children = [
                            hyperline_client.models.dataset.Dataset(
                                chain = '', 
                                name = '', 
                                description = '', 
                                big_query_reference = '', 
                                spark_reference = '', 
                                sqldb_reference = '', )
                            ], )
                    ], 
                processed_datesets = [
                    hyperline_client.models.dataset.Dataset(
                        chain = '', 
                        name = '', 
                        description = '', 
                        big_query_reference = '', 
                        spark_reference = '', 
                        sqldb_reference = '', 
                        tables = [
                            hyperline_client.models.dataset_table.DatasetTable(
                                name = '', 
                                is_view = True, 
                                columns = [
                                    hyperline_client.models.dataset_table_column.DatasetTableColumn(
                                        name = '', 
                                        type = '', 
                                        is_nullable = True, 
                                        is_partition_key = True, )
                                    ], )
                            ], 
                        children = [
                            hyperline_client.models.dataset.Dataset(
                                chain = '', 
                                name = '', 
                                description = '', 
                                big_query_reference = '', 
                                spark_reference = '', 
                                sqldb_reference = '', )
                            ], )
                    ]
            )
        else :
            return DatasetCollection(
        )
        """

    def testDatasetCollection(self):
        """Test DatasetCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
