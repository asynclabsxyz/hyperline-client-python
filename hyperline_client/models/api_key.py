# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class ApiKey(BaseModel):
    """
    An API key object.
    """
    api_key: Optional[StrictStr] = None
    api_secret_key: Optional[StrictStr] = None
    __properties = ["api_key", "api_secret_key"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiKey:
        """Create an instance of ApiKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if api_key (nullable) is None
        # and __fields_set__ contains the field
        if self.api_key is None and "api_key" in self.__fields_set__:
            _dict['api_key'] = None

        # set to None if api_secret_key (nullable) is None
        # and __fields_set__ contains the field
        if self.api_secret_key is None and "api_secret_key" in self.__fields_set__:
            _dict['api_secret_key'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiKey:
        """Create an instance of ApiKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiKey.parse_obj(obj)

        _obj = ApiKey.parse_obj({
            "api_key": obj.get("api_key"),
            "api_secret_key": obj.get("api_secret_key")
        })
        return _obj


