# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from hyperline_client.models.sql_field_schema import SqlFieldSchema
from hyperline_client.models.sql_job_statistics import SqlJobStatistics

class SqlExecuteResponse(BaseModel):
    """
    SqlExecuteResponse
    """
    next_execution_token: Optional[StrictStr] = None
    job_id: Optional[StrictStr] = None
    job_type: Optional[StrictStr] = None
    query: Optional[StrictStr] = None
    var_schema: Optional[conlist(SqlFieldSchema)] = Field(None, alias="schema")
    rows: Optional[conlist(Any)] = None
    statistics: Optional[SqlJobStatistics] = None
    __properties = ["next_execution_token", "job_id", "job_type", "query", "schema", "rows", "statistics"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SqlExecuteResponse:
        """Create an instance of SqlExecuteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in var_schema (list)
        _items = []
        if self.var_schema:
            for _item in self.var_schema:
                if _item:
                    _items.append(_item.to_dict())
            _dict['schema'] = _items
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SqlExecuteResponse:
        """Create an instance of SqlExecuteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SqlExecuteResponse.parse_obj(obj)

        _obj = SqlExecuteResponse.parse_obj({
            "next_execution_token": obj.get("next_execution_token"),
            "job_id": obj.get("job_id"),
            "job_type": obj.get("job_type"),
            "query": obj.get("query"),
            "var_schema": [SqlFieldSchema.from_dict(_item) for _item in obj.get("schema")] if obj.get("schema") is not None else None,
            "rows": obj.get("rows"),
            "statistics": SqlJobStatistics.from_dict(obj.get("statistics")) if obj.get("statistics") is not None else None
        })
        return _obj


