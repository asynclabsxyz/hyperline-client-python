# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator
from hyperline_client.models.user_onboarding_steps import UserOnboardingSteps

class User(BaseModel):
    """
    A user object.
    """
    email: Optional[constr(strict=True, max_length=64)] = Field(None, description="The user's email")
    name: constr(strict=True, max_length=64) = Field(..., description="The user's name")
    organization: constr(strict=True, max_length=64) = Field(..., description="The user's organization name")
    joined: Optional[datetime] = Field(None, description="The datetime the user joined")
    role: StrictStr = Field(..., description="The user's role")
    secrets: Optional[StrictStr] = Field(None, description="The user's secrets")
    status: Optional[StrictStr] = Field(None, description="The user's status")
    org_id: Optional[StrictInt] = Field(None, description="The user's org id")
    org_workspace_id: Optional[StrictStr] = Field(None, description="The user's org workspace identifier")
    org_joined: Optional[datetime] = Field(None, description="The datetime the user's org joined")
    impersonated_user: Optional[constr(strict=True, max_length=64)] = Field(None, description="The user's impersonated user")
    airflow_enabled: Optional[StrictBool] = Field(None, description="Airflow enabled for user's org")
    jupyter_enabled: Optional[StrictBool] = Field(None, description="Jupyter enabled for user's org")
    airflow_updated_at: Optional[datetime] = Field(None, description="The datetime the `airflow_enabled` was last updated")
    jupyter_updated_at: Optional[datetime] = Field(None, description="The datetime the `jupyter_enabled` was last updated")
    in_trial: Optional[StrictBool] = Field(None, description="Whether user's org is in trial")
    is_provisioning: Optional[StrictBool] = Field(None, description="Whether user's org is provisioning")
    has_toured: Optional[StrictBool] = Field(None, description="Whether user has seen the guided tour")
    onboarding_steps: Optional[UserOnboardingSteps] = None
    __properties = ["email", "name", "organization", "joined", "role", "secrets", "status", "org_id", "org_workspace_id", "org_joined", "impersonated_user", "airflow_enabled", "jupyter_enabled", "airflow_updated_at", "jupyter_updated_at", "in_trial", "is_provisioning", "has_toured", "onboarding_steps"]

    @validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('user', 'admin'):
            raise ValueError("must be one of enum values ('user', 'admin')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('active', 'inactive'):
            raise ValueError("must be one of enum values ('active', 'inactive')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "joined",
                            "org_joined",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of onboarding_steps
        if self.onboarding_steps:
            _dict['onboarding_steps'] = self.onboarding_steps.to_dict()
        # set to None if airflow_updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.airflow_updated_at is None and "airflow_updated_at" in self.__fields_set__:
            _dict['airflow_updated_at'] = None

        # set to None if jupyter_updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.jupyter_updated_at is None and "jupyter_updated_at" in self.__fields_set__:
            _dict['jupyter_updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "email": obj.get("email"),
            "name": obj.get("name"),
            "organization": obj.get("organization"),
            "joined": obj.get("joined"),
            "role": obj.get("role"),
            "secrets": obj.get("secrets"),
            "status": obj.get("status"),
            "org_id": obj.get("org_id"),
            "org_workspace_id": obj.get("org_workspace_id"),
            "org_joined": obj.get("org_joined"),
            "impersonated_user": obj.get("impersonated_user"),
            "airflow_enabled": obj.get("airflow_enabled"),
            "jupyter_enabled": obj.get("jupyter_enabled"),
            "airflow_updated_at": obj.get("airflow_updated_at"),
            "jupyter_updated_at": obj.get("jupyter_updated_at"),
            "in_trial": obj.get("in_trial"),
            "is_provisioning": obj.get("is_provisioning"),
            "has_toured": obj.get("has_toured"),
            "onboarding_steps": UserOnboardingSteps.from_dict(obj.get("onboarding_steps")) if obj.get("onboarding_steps") is not None else None
        })
        return _obj


