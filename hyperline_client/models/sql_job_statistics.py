# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr

class SqlJobStatistics(BaseModel):
    """
    SqlJobStatistics
    """
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    duration: Optional[StrictInt] = None
    total_bytes_processed: Optional[StrictInt] = None
    error_code: Optional[StrictStr] = None
    error_type: Optional[StrictStr] = None
    failure_type: Optional[StrictStr] = None
    failure_message: Optional[StrictStr] = None
    execution_time_millis: Optional[StrictInt] = None
    total_rows: Optional[StrictInt] = None
    output_bytes: Optional[StrictInt] = None
    output_rows: Optional[StrictInt] = None
    __properties = ["start_time", "end_time", "duration", "total_bytes_processed", "error_code", "error_type", "failure_type", "failure_message", "execution_time_millis", "total_rows", "output_bytes", "output_rows"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SqlJobStatistics:
        """Create an instance of SqlJobStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if error_code (nullable) is None
        # and __fields_set__ contains the field
        if self.error_code is None and "error_code" in self.__fields_set__:
            _dict['error_code'] = None

        # set to None if error_type (nullable) is None
        # and __fields_set__ contains the field
        if self.error_type is None and "error_type" in self.__fields_set__:
            _dict['error_type'] = None

        # set to None if failure_type (nullable) is None
        # and __fields_set__ contains the field
        if self.failure_type is None and "failure_type" in self.__fields_set__:
            _dict['failure_type'] = None

        # set to None if failure_message (nullable) is None
        # and __fields_set__ contains the field
        if self.failure_message is None and "failure_message" in self.__fields_set__:
            _dict['failure_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SqlJobStatistics:
        """Create an instance of SqlJobStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SqlJobStatistics.parse_obj(obj)

        _obj = SqlJobStatistics.parse_obj({
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "duration": obj.get("duration"),
            "total_bytes_processed": obj.get("total_bytes_processed"),
            "error_code": obj.get("error_code"),
            "error_type": obj.get("error_type"),
            "failure_type": obj.get("failure_type"),
            "failure_message": obj.get("failure_message"),
            "execution_time_millis": obj.get("execution_time_millis"),
            "total_rows": obj.get("total_rows"),
            "output_bytes": obj.get("output_bytes"),
            "output_rows": obj.get("output_rows")
        })
        return _obj


