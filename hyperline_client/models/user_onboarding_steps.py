# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class UserOnboardingSteps(BaseModel):
    """
    User's onboarding steps
    """
    sql_step: Optional[StrictBool] = None
    spark_step: Optional[StrictBool] = None
    notebook_step: Optional[StrictBool] = None
    updated_at: Optional[datetime] = Field(None, description="The datetime the onboarding steps were last updated")
    __properties = ["sql_step", "spark_step", "notebook_step", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserOnboardingSteps:
        """Create an instance of UserOnboardingSteps from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_at is None and "updated_at" in self.__fields_set__:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserOnboardingSteps:
        """Create an instance of UserOnboardingSteps from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserOnboardingSteps.parse_obj(obj)

        _obj = UserOnboardingSteps.parse_obj({
            "sql_step": obj.get("sql_step"),
            "spark_step": obj.get("spark_step"),
            "notebook_step": obj.get("notebook_step"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


