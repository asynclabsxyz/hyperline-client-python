# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from hyperline_client.models.file import File

class Sample(BaseModel):
    """
    Sample
    """
    file: Optional[File] = None
    name: StrictStr = Field(...)
    type: Optional[StrictStr] = None
    level: Optional[StrictStr] = None
    engine: Optional[StrictStr] = None
    tags: Optional[conlist(StrictStr)] = None
    __properties = ["file", "name", "type", "level", "engine", "tags"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('pyspark', 'python', 'sql', 'trino', 'pipeline'):
            raise ValueError("must be one of enum values ('pyspark', 'python', 'sql', 'trino', 'pipeline')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Sample:
        """Create an instance of Sample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Sample:
        """Create an instance of Sample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Sample.parse_obj(obj)

        _obj = Sample.parse_obj({
            "file": File.from_dict(obj.get("file")) if obj.get("file") is not None else None,
            "name": obj.get("name"),
            "type": obj.get("type"),
            "level": obj.get("level"),
            "engine": obj.get("engine"),
            "tags": obj.get("tags")
        })
        return _obj


