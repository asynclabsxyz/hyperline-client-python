# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Stage(BaseModel):
    """
    A pipeline stage object.
    """
    stage_name: StrictStr = Field(...)
    job_type: StrictStr = Field(...)
    job_name: StrictStr = Field(...)
    arguments: Optional[StrictStr] = None
    package: Optional[StrictStr] = None
    __properties = ["stage_name", "job_type", "job_name", "arguments", "package"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Stage:
        """Create an instance of Stage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Stage:
        """Create an instance of Stage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Stage.parse_obj(obj)

        _obj = Stage.parse_obj({
            "stage_name": obj.get("stage_name"),
            "job_type": obj.get("job_type"),
            "job_name": obj.get("job_name"),
            "arguments": obj.get("arguments"),
            "package": obj.get("package")
        })
        return _obj


