# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class Integration(BaseModel):
    """
    An integration object.
    """
    reference_name: StrictStr = Field(...)
    name: StrictStr = Field(...)
    details: Optional[StrictStr] = None
    type: StrictStr = Field(...)
    is_valid: Optional[StrictBool] = True
    __properties = ["reference_name", "name", "details", "type", "is_valid"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('gcs', 's3', 'mysql', 'postgresql', 'clickhouse', 'mongodb', 'redshift', 'sqlserver', 'snowflake'):
            raise ValueError("must be one of enum values ('gcs', 's3', 'mysql', 'postgresql', 'clickhouse', 'mongodb', 'redshift', 'sqlserver', 'snowflake')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Integration:
        """Create an instance of Integration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "reference_name",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Integration:
        """Create an instance of Integration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Integration.parse_obj(obj)

        _obj = Integration.parse_obj({
            "reference_name": obj.get("reference_name"),
            "name": obj.get("name"),
            "details": obj.get("details"),
            "type": obj.get("type"),
            "is_valid": obj.get("is_valid") if obj.get("is_valid") is not None else True
        })
        return _obj


