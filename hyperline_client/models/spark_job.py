# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class SparkJob(BaseModel):
    """
    A Spark Job object.
    """
    id: StrictStr = Field(..., description="The job id.")
    name: Optional[StrictStr] = Field(None, description="The job name.")
    file: Optional[StrictStr] = Field(None, description="The file path of the Spark program.")
    type: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    submitted_by: Optional[StrictStr] = Field(None, description="The email of the submitter.")
    submitted_on: Optional[StrictStr] = None
    duration: Optional[StrictInt] = Field(None, description="The duration of the job in seconds.")
    __properties = ["id", "name", "file", "type", "status", "submitted_by", "submitted_on", "duration"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SparkJob:
        """Create an instance of SparkJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SparkJob:
        """Create an instance of SparkJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SparkJob.parse_obj(obj)

        _obj = SparkJob.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "file": obj.get("file"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "submitted_by": obj.get("submitted_by"),
            "submitted_on": obj.get("submitted_on"),
            "duration": obj.get("duration")
        })
        return _obj


