# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field
from hyperline_client.models.itemized_cost import ItemizedCost

class DatedItemizedCost(BaseModel):
    """
    All in unit of cents.
    """
    cost: Optional[ItemizedCost] = None
    var_date: Optional[date] = Field(None, alias="date", description="The date of the itemized cost.")
    __properties = ["cost", "date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatedItemizedCost:
        """Create an instance of DatedItemizedCost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cost
        if self.cost:
            _dict['cost'] = self.cost.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatedItemizedCost:
        """Create an instance of DatedItemizedCost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatedItemizedCost.parse_obj(obj)

        _obj = DatedItemizedCost.parse_obj({
            "cost": ItemizedCost.from_dict(obj.get("cost")) if obj.get("cost") is not None else None,
            "var_date": obj.get("date")
        })
        return _obj


