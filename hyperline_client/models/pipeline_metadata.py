# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conlist

class PipelineMetadata(BaseModel):
    """
    PipelineMetadata
    """
    pipeline_name: Optional[StrictStr] = None
    active: Optional[StrictBool] = None
    owners: Optional[conlist(StrictStr)] = None
    tags: Optional[conlist(StrictStr)] = None
    schedule: Optional[StrictStr] = None
    last_run: Optional[datetime] = None
    next_run: Optional[datetime] = None
    has_import_errors: Optional[StrictBool] = None
    file_location: Optional[StrictStr] = None
    __properties = ["pipeline_name", "active", "owners", "tags", "schedule", "last_run", "next_run", "has_import_errors", "file_location"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PipelineMetadata:
        """Create an instance of PipelineMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PipelineMetadata:
        """Create an instance of PipelineMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PipelineMetadata.parse_obj(obj)

        _obj = PipelineMetadata.parse_obj({
            "pipeline_name": obj.get("pipeline_name"),
            "active": obj.get("active"),
            "owners": obj.get("owners"),
            "tags": obj.get("tags"),
            "schedule": obj.get("schedule"),
            "last_run": obj.get("last_run"),
            "next_run": obj.get("next_run"),
            "has_import_errors": obj.get("has_import_errors"),
            "file_location": obj.get("file_location")
        })
        return _obj


