# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt

class ItemizedCost(BaseModel):
    """
    All in unit of cents.
    """
    bigquery: Optional[StrictInt] = None
    gcs: Optional[StrictInt] = None
    trino: Optional[StrictInt] = None
    dataproc: Optional[StrictInt] = None
    snowflake: Optional[StrictInt] = None
    airflow: Optional[StrictInt] = None
    jupyter: Optional[StrictInt] = None
    gke: Optional[StrictInt] = None
    __properties = ["bigquery", "gcs", "trino", "dataproc", "snowflake", "airflow", "jupyter", "gke"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ItemizedCost:
        """Create an instance of ItemizedCost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ItemizedCost:
        """Create an instance of ItemizedCost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ItemizedCost.parse_obj(obj)

        _obj = ItemizedCost.parse_obj({
            "bigquery": obj.get("bigquery"),
            "gcs": obj.get("gcs"),
            "trino": obj.get("trino"),
            "dataproc": obj.get("dataproc"),
            "snowflake": obj.get("snowflake"),
            "airflow": obj.get("airflow"),
            "jupyter": obj.get("jupyter"),
            "gke": obj.get("gke")
        })
        return _obj


