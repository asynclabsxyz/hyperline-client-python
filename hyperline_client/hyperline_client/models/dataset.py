# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from hyperline_client.models.dataset_table import DatasetTable

class Dataset(BaseModel):
    """
    A dataset object.
    """
    chain: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    big_query_reference: Optional[StrictStr] = None
    spark_reference: Optional[StrictStr] = None
    sqldb_reference: Optional[StrictStr] = Field(None, alias="SQLDBReference")
    tables: Optional[conlist(DatasetTable)] = None
    children: Optional[conlist(Dataset)] = None
    __properties = ["chain", "name", "description", "big_query_reference", "spark_reference", "SQLDBReference", "tables", "children"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dataset:
        """Create an instance of Dataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tables (list)
        _items = []
        if self.tables:
            for _item in self.tables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dataset:
        """Create an instance of Dataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dataset.parse_obj(obj)

        _obj = Dataset.parse_obj({
            "chain": obj.get("chain"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "big_query_reference": obj.get("big_query_reference"),
            "spark_reference": obj.get("spark_reference"),
            "sqldb_reference": obj.get("SQLDBReference"),
            "tables": [DatasetTable.from_dict(_item) for _item in obj.get("tables")] if obj.get("tables") is not None else None,
            "children": [Dataset.from_dict(_item) for _item in obj.get("children")] if obj.get("children") is not None else None
        })
        return _obj

Dataset.update_forward_refs()

