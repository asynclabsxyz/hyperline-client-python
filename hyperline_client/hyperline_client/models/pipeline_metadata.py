# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr

class PipelineMetadata(BaseModel):
    """
    PipelineMetadata
    """
    pipeline_name: Optional[StrictStr] = None
    org_id: Optional[StrictInt] = None
    author_email: Optional[StrictStr] = None
    active: Optional[StrictBool] = None
    created_at: Optional[datetime] = None
    last_updated_at: Optional[datetime] = None
    last_executed_at: Optional[datetime] = None
    __properties = ["pipeline_name", "org_id", "author_email", "active", "created_at", "last_updated_at", "last_executed_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PipelineMetadata:
        """Create an instance of PipelineMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PipelineMetadata:
        """Create an instance of PipelineMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PipelineMetadata.parse_obj(obj)

        _obj = PipelineMetadata.parse_obj({
            "pipeline_name": obj.get("pipeline_name"),
            "org_id": obj.get("org_id"),
            "author_email": obj.get("author_email"),
            "active": obj.get("active"),
            "created_at": obj.get("created_at"),
            "last_updated_at": obj.get("last_updated_at"),
            "last_executed_at": obj.get("last_executed_at")
        })
        return _obj


