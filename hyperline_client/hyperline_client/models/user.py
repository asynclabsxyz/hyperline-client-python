# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE! 

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr, validator

class User(BaseModel):
    """
    A user object.
    """
    email: Optional[constr(strict=True, max_length=64)] = Field(None, description="The user's email")
    name: constr(strict=True, max_length=64) = Field(..., description="The user's name")
    organization: constr(strict=True, max_length=64) = Field(..., description="The user's organization name")
    joined: Optional[datetime] = Field(None, description="The datetime the user joined")
    role: StrictStr = Field(..., description="The user's role")
    secrets: Optional[StrictStr] = Field(None, description="The user's secrets")
    status: Optional[StrictStr] = Field(None, description="The user's status")
    org_id: Optional[StrictInt] = Field(None, description="The user's org id")
    impersonated_user: Optional[constr(strict=True, max_length=64)] = Field(None, description="The user's impersonated user")
    __properties = ["email", "name", "organization", "joined", "role", "secrets", "status", "org_id", "impersonated_user"]

    @validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('user', 'admin'):
            raise ValueError("must be one of enum values ('user', 'admin')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('active', 'inactive'):
            raise ValueError("must be one of enum values ('active', 'inactive')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "joined",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "email": obj.get("email"),
            "name": obj.get("name"),
            "organization": obj.get("organization"),
            "joined": obj.get("joined"),
            "role": obj.get("role"),
            "secrets": obj.get("secrets"),
            "status": obj.get("status"),
            "org_id": obj.get("org_id"),
            "impersonated_user": obj.get("impersonated_user")
        })
        return _obj


