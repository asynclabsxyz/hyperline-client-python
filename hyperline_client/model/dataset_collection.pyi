# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE!   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperline_client import schemas  # noqa: F401


class DatasetCollection(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A dataset collection object containing raw and/or processed datasets.
    """


    class MetaOapg:
        
        class properties:
            
            
            class raw_datasets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dataset']:
                        return Dataset
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dataset'], typing.List['Dataset']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'raw_datasets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dataset':
                    return super().__getitem__(i)
            
            
            class processed_datesets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dataset']:
                        return Dataset
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dataset'], typing.List['Dataset']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'processed_datesets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dataset':
                    return super().__getitem__(i)
            __annotations__ = {
                "raw_datasets": raw_datasets,
                "processed_datesets": processed_datesets,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raw_datasets"]) -> MetaOapg.properties.raw_datasets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processed_datesets"]) -> MetaOapg.properties.processed_datesets: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["raw_datasets", "processed_datesets", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raw_datasets"]) -> typing.Union[MetaOapg.properties.raw_datasets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processed_datesets"]) -> typing.Union[MetaOapg.properties.processed_datesets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["raw_datasets", "processed_datesets", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        raw_datasets: typing.Union[MetaOapg.properties.raw_datasets, list, tuple, schemas.Unset] = schemas.unset,
        processed_datesets: typing.Union[MetaOapg.properties.processed_datesets, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DatasetCollection':
        return super().__new__(
            cls,
            *_args,
            raw_datasets=raw_datasets,
            processed_datesets=processed_datesets,
            _configuration=_configuration,
            **kwargs,
        )

from hyperline_client.model.dataset import Dataset
