# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE!   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperline_client import schemas  # noqa: F401


class PipelineBackfillRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A pipeline backfill request object.
    """


    class MetaOapg:
        required = {
            "argument_name",
            "end_date",
            "pipeline_name",
            "start_date",
        }
        
        class properties:
            pipeline_name = schemas.StrSchema
            argument_name = schemas.StrSchema
            start_date = schemas.DateSchema
            end_date = schemas.DateSchema
            interval = schemas.IntSchema
            __annotations__ = {
                "pipeline_name": pipeline_name,
                "argument_name": argument_name,
                "start_date": start_date,
                "end_date": end_date,
                "interval": interval,
            }
    
    argument_name: MetaOapg.properties.argument_name
    end_date: MetaOapg.properties.end_date
    pipeline_name: MetaOapg.properties.pipeline_name
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipeline_name"]) -> MetaOapg.properties.pipeline_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["argument_name"]) -> MetaOapg.properties.argument_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pipeline_name", "argument_name", "start_date", "end_date", "interval", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipeline_name"]) -> MetaOapg.properties.pipeline_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["argument_name"]) -> MetaOapg.properties.argument_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval"]) -> typing.Union[MetaOapg.properties.interval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pipeline_name", "argument_name", "start_date", "end_date", "interval", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        argument_name: typing.Union[MetaOapg.properties.argument_name, str, ],
        end_date: typing.Union[MetaOapg.properties.end_date, str, date, ],
        pipeline_name: typing.Union[MetaOapg.properties.pipeline_name, str, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, date, ],
        interval: typing.Union[MetaOapg.properties.interval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PipelineBackfillRequest':
        return super().__new__(
            cls,
            *_args,
            argument_name=argument_name,
            end_date=end_date,
            pipeline_name=pipeline_name,
            start_date=start_date,
            interval=interval,
            _configuration=_configuration,
            **kwargs,
        )
