# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE!   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperline_client import schemas  # noqa: F401


class Dataset(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A dataset object.
    """


    class MetaOapg:
        
        class properties:
            chain = schemas.StrSchema
            name = schemas.StrSchema
            description = schemas.StrSchema
            big_query_reference = schemas.StrSchema
            spark_reference = schemas.StrSchema
            SQLDBReference = schemas.StrSchema
            
            
            class tables(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DatasetTable']:
                        return DatasetTable
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DatasetTable'], typing.List['DatasetTable']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tables':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DatasetTable':
                    return super().__getitem__(i)
            
            
            class children(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dataset']:
                        return Dataset
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Dataset'], typing.List['Dataset']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'children':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dataset':
                    return super().__getitem__(i)
            __annotations__ = {
                "chain": chain,
                "name": name,
                "description": description,
                "big_query_reference": big_query_reference,
                "spark_reference": spark_reference,
                "SQLDBReference": SQLDBReference,
                "tables": tables,
                "children": children,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chain"]) -> MetaOapg.properties.chain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["big_query_reference"]) -> MetaOapg.properties.big_query_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spark_reference"]) -> MetaOapg.properties.spark_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SQLDBReference"]) -> MetaOapg.properties.SQLDBReference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tables"]) -> MetaOapg.properties.tables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["children"]) -> MetaOapg.properties.children: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["chain", "name", "description", "big_query_reference", "spark_reference", "SQLDBReference", "tables", "children", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chain"]) -> typing.Union[MetaOapg.properties.chain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["big_query_reference"]) -> typing.Union[MetaOapg.properties.big_query_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spark_reference"]) -> typing.Union[MetaOapg.properties.spark_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SQLDBReference"]) -> typing.Union[MetaOapg.properties.SQLDBReference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tables"]) -> typing.Union[MetaOapg.properties.tables, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["children"]) -> typing.Union[MetaOapg.properties.children, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["chain", "name", "description", "big_query_reference", "spark_reference", "SQLDBReference", "tables", "children", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        chain: typing.Union[MetaOapg.properties.chain, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        big_query_reference: typing.Union[MetaOapg.properties.big_query_reference, str, schemas.Unset] = schemas.unset,
        spark_reference: typing.Union[MetaOapg.properties.spark_reference, str, schemas.Unset] = schemas.unset,
        SQLDBReference: typing.Union[MetaOapg.properties.SQLDBReference, str, schemas.Unset] = schemas.unset,
        tables: typing.Union[MetaOapg.properties.tables, list, tuple, schemas.Unset] = schemas.unset,
        children: typing.Union[MetaOapg.properties.children, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dataset':
        return super().__new__(
            cls,
            *_args,
            chain=chain,
            name=name,
            description=description,
            big_query_reference=big_query_reference,
            spark_reference=spark_reference,
            SQLDBReference=SQLDBReference,
            tables=tables,
            children=children,
            _configuration=_configuration,
            **kwargs,
        )

from hyperline_client.model.dataset_table import DatasetTable
