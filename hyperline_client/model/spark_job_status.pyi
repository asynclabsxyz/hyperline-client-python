# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE!   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperline_client import schemas  # noqa: F401


class SparkJobStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A Spark job status object.
    """


    class MetaOapg:
        required = {
            "job_status",
            "job_id",
        }
        
        class properties:
            job_id = schemas.StrSchema
            job_status = schemas.StrSchema
            job_type = schemas.StrSchema
            status_timestamp = schemas.StrSchema
            __annotations__ = {
                "job_id": job_id,
                "job_status": job_status,
                "job_type": job_type,
                "status_timestamp": status_timestamp,
            }
    
    job_status: MetaOapg.properties.job_status
    job_id: MetaOapg.properties.job_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_id"]) -> MetaOapg.properties.job_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_status"]) -> MetaOapg.properties.job_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_type"]) -> MetaOapg.properties.job_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_timestamp"]) -> MetaOapg.properties.status_timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["job_id", "job_status", "job_type", "status_timestamp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_id"]) -> MetaOapg.properties.job_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_status"]) -> MetaOapg.properties.job_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_type"]) -> typing.Union[MetaOapg.properties.job_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_timestamp"]) -> typing.Union[MetaOapg.properties.status_timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job_id", "job_status", "job_type", "status_timestamp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        job_status: typing.Union[MetaOapg.properties.job_status, str, ],
        job_id: typing.Union[MetaOapg.properties.job_id, str, ],
        job_type: typing.Union[MetaOapg.properties.job_type, str, schemas.Unset] = schemas.unset,
        status_timestamp: typing.Union[MetaOapg.properties.status_timestamp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SparkJobStatus':
        return super().__new__(
            cls,
            *_args,
            job_status=job_status,
            job_id=job_id,
            job_type=job_type,
            status_timestamp=status_timestamp,
            _configuration=_configuration,
            **kwargs,
        )
