# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE!   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperline_client import schemas  # noqa: F401


class PipelineMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            pipeline_name = schemas.StrSchema
            org_id = schemas.IntSchema
            author_email = schemas.StrSchema
            active = schemas.BoolSchema
            created_at = schemas.DateTimeSchema
            last_updated_at = schemas.DateTimeSchema
            last_executed_at = schemas.DateTimeSchema
            __annotations__ = {
                "pipeline_name": pipeline_name,
                "org_id": org_id,
                "author_email": author_email,
                "active": active,
                "created_at": created_at,
                "last_updated_at": last_updated_at,
                "last_executed_at": last_executed_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipeline_name"]) -> MetaOapg.properties.pipeline_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author_email"]) -> MetaOapg.properties.author_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_updated_at"]) -> MetaOapg.properties.last_updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_executed_at"]) -> MetaOapg.properties.last_executed_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pipeline_name", "org_id", "author_email", "active", "created_at", "last_updated_at", "last_executed_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipeline_name"]) -> typing.Union[MetaOapg.properties.pipeline_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author_email"]) -> typing.Union[MetaOapg.properties.author_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_updated_at"]) -> typing.Union[MetaOapg.properties.last_updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_executed_at"]) -> typing.Union[MetaOapg.properties.last_executed_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pipeline_name", "org_id", "author_email", "active", "created_at", "last_updated_at", "last_executed_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        pipeline_name: typing.Union[MetaOapg.properties.pipeline_name, str, schemas.Unset] = schemas.unset,
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        author_email: typing.Union[MetaOapg.properties.author_email, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        last_updated_at: typing.Union[MetaOapg.properties.last_updated_at, str, datetime, schemas.Unset] = schemas.unset,
        last_executed_at: typing.Union[MetaOapg.properties.last_executed_at, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PipelineMetadata':
        return super().__new__(
            cls,
            *_args,
            pipeline_name=pipeline_name,
            org_id=org_id,
            author_email=author_email,
            active=active,
            created_at=created_at,
            last_updated_at=last_updated_at,
            last_executed_at=last_executed_at,
            _configuration=_configuration,
            **kwargs,
        )
