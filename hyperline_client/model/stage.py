# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE!   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperline_client import schemas  # noqa: F401


class Stage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A pipeline stage object.
    """


    class MetaOapg:
        required = {
            "job_type",
            "job_name",
            "stage_name",
        }
        
        class properties:
            stage_name = schemas.StrSchema
            job_type = schemas.StrSchema
            job_name = schemas.StrSchema
            arguments = schemas.StrSchema
            package = schemas.StrSchema
            __annotations__ = {
                "stage_name": stage_name,
                "job_type": job_type,
                "job_name": job_name,
                "arguments": arguments,
                "package": package,
            }
    
    job_type: MetaOapg.properties.job_type
    job_name: MetaOapg.properties.job_name
    stage_name: MetaOapg.properties.stage_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stage_name"]) -> MetaOapg.properties.stage_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_type"]) -> MetaOapg.properties.job_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_name"]) -> MetaOapg.properties.job_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arguments"]) -> MetaOapg.properties.arguments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["package"]) -> MetaOapg.properties.package: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stage_name", "job_type", "job_name", "arguments", "package", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stage_name"]) -> MetaOapg.properties.stage_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_type"]) -> MetaOapg.properties.job_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_name"]) -> MetaOapg.properties.job_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arguments"]) -> typing.Union[MetaOapg.properties.arguments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["package"]) -> typing.Union[MetaOapg.properties.package, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stage_name", "job_type", "job_name", "arguments", "package", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        job_type: typing.Union[MetaOapg.properties.job_type, str, ],
        job_name: typing.Union[MetaOapg.properties.job_name, str, ],
        stage_name: typing.Union[MetaOapg.properties.stage_name, str, ],
        arguments: typing.Union[MetaOapg.properties.arguments, str, schemas.Unset] = schemas.unset,
        package: typing.Union[MetaOapg.properties.package, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Stage':
        return super().__new__(
            cls,
            *_args,
            job_type=job_type,
            job_name=job_name,
            stage_name=stage_name,
            arguments=arguments,
            package=package,
            _configuration=_configuration,
            **kwargs,
        )
