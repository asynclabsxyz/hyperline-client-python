# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE!   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperline_client import schemas  # noqa: F401


class Pipeline(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "stages",
            "pipeline_name",
        }
        
        class properties:
            pipeline_name = schemas.StrSchema
            
            
            class stages(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Stage']:
                        return Stage
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Stage'], typing.List['Stage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stages':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Stage':
                    return super().__getitem__(i)
            schedule = schemas.StrSchema
            max_active_runs = schemas.IntSchema
            retries = schemas.IntSchema
            start_date = schemas.Schema
            catchup = schemas.BoolSchema
            write_test_mode = schemas.BoolSchema
            sample_reads = schemas.BoolSchema
            __annotations__ = {
                "pipeline_name": pipeline_name,
                "stages": stages,
                "schedule": schedule,
                "max_active_runs": max_active_runs,
                "retries": retries,
                "start_date": start_date,
                "catchup": catchup,
                "write_test_mode": write_test_mode,
                "sample_reads": sample_reads,
            }
    
    stages: MetaOapg.properties.stages
    pipeline_name: MetaOapg.properties.pipeline_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipeline_name"]) -> MetaOapg.properties.pipeline_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stages"]) -> MetaOapg.properties.stages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule"]) -> MetaOapg.properties.schedule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_active_runs"]) -> MetaOapg.properties.max_active_runs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retries"]) -> MetaOapg.properties.retries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catchup"]) -> MetaOapg.properties.catchup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["write_test_mode"]) -> MetaOapg.properties.write_test_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sample_reads"]) -> MetaOapg.properties.sample_reads: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pipeline_name", "stages", "schedule", "max_active_runs", "retries", "start_date", "catchup", "write_test_mode", "sample_reads", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipeline_name"]) -> MetaOapg.properties.pipeline_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stages"]) -> MetaOapg.properties.stages: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule"]) -> typing.Union[MetaOapg.properties.schedule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_active_runs"]) -> typing.Union[MetaOapg.properties.max_active_runs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retries"]) -> typing.Union[MetaOapg.properties.retries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catchup"]) -> typing.Union[MetaOapg.properties.catchup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["write_test_mode"]) -> typing.Union[MetaOapg.properties.write_test_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sample_reads"]) -> typing.Union[MetaOapg.properties.sample_reads, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pipeline_name", "stages", "schedule", "max_active_runs", "retries", "start_date", "catchup", "write_test_mode", "sample_reads", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        stages: typing.Union[MetaOapg.properties.stages, list, tuple, ],
        pipeline_name: typing.Union[MetaOapg.properties.pipeline_name, str, ],
        schedule: typing.Union[MetaOapg.properties.schedule, str, schemas.Unset] = schemas.unset,
        max_active_runs: typing.Union[MetaOapg.properties.max_active_runs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        retries: typing.Union[MetaOapg.properties.retries, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, schemas.Unset] = schemas.unset,
        catchup: typing.Union[MetaOapg.properties.catchup, bool, schemas.Unset] = schemas.unset,
        write_test_mode: typing.Union[MetaOapg.properties.write_test_mode, bool, schemas.Unset] = schemas.unset,
        sample_reads: typing.Union[MetaOapg.properties.sample_reads, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Pipeline':
        return super().__new__(
            cls,
            *_args,
            stages=stages,
            pipeline_name=pipeline_name,
            schedule=schedule,
            max_active_runs=max_active_runs,
            retries=retries,
            start_date=start_date,
            catchup=catchup,
            write_test_mode=write_test_mode,
            sample_reads=sample_reads,
            _configuration=_configuration,
            **kwargs,
        )

from hyperline_client.model.stage import Stage
