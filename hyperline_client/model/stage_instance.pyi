# coding: utf-8

"""
    Hyperline API

    DO NOT EDIT THIS FILE!   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dev@asynclabs.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from hyperline_client import schemas  # noqa: F401


class StageInstance(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "duration",
            "execution_data",
            "run_id",
            "stage_name",
            "try_number",
            "state",
            "pipeline_name",
        }
        
        class properties:
            pipeline_name = schemas.StrSchema
            run_id = schemas.StrSchema
            stage_name = schemas.StrSchema
            duration = schemas.Float32Schema
            state = schemas.StrSchema
            try_number = schemas.Int32Schema
            execution_date = schemas.DateSchema
            __annotations__ = {
                "pipeline_name": pipeline_name,
                "run_id": run_id,
                "stage_name": stage_name,
                "duration": duration,
                "state": state,
                "try_number": try_number,
                "execution_date": execution_date,
            }
    
    duration: MetaOapg.properties.duration
    execution_data: schemas.AnyTypeSchema
    run_id: MetaOapg.properties.run_id
    stage_name: MetaOapg.properties.stage_name
    try_number: MetaOapg.properties.try_number
    state: MetaOapg.properties.state
    pipeline_name: MetaOapg.properties.pipeline_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipeline_name"]) -> MetaOapg.properties.pipeline_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["run_id"]) -> MetaOapg.properties.run_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stage_name"]) -> MetaOapg.properties.stage_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["try_number"]) -> MetaOapg.properties.try_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["execution_date"]) -> MetaOapg.properties.execution_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pipeline_name", "run_id", "stage_name", "duration", "state", "try_number", "execution_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipeline_name"]) -> MetaOapg.properties.pipeline_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["run_id"]) -> MetaOapg.properties.run_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stage_name"]) -> MetaOapg.properties.stage_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["try_number"]) -> MetaOapg.properties.try_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["execution_date"]) -> typing.Union[MetaOapg.properties.execution_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pipeline_name", "run_id", "stage_name", "duration", "state", "try_number", "execution_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, ],
        execution_data: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        run_id: typing.Union[MetaOapg.properties.run_id, str, ],
        stage_name: typing.Union[MetaOapg.properties.stage_name, str, ],
        try_number: typing.Union[MetaOapg.properties.try_number, decimal.Decimal, int, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        pipeline_name: typing.Union[MetaOapg.properties.pipeline_name, str, ],
        execution_date: typing.Union[MetaOapg.properties.execution_date, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StageInstance':
        return super().__new__(
            cls,
            *_args,
            duration=duration,
            execution_data=execution_data,
            run_id=run_id,
            stage_name=stage_name,
            try_number=try_number,
            state=state,
            pipeline_name=pipeline_name,
            execution_date=execution_date,
            _configuration=_configuration,
            **kwargs,
        )
